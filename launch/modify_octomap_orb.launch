<launch>
    <!-- Launch Octomap Server -->
    <include file="$(find floor_octomap)/launch/octomap.launch">
        <arg name="resolution" value="0.02"/>
        <arg name="cloud_mapping" value="/depth_filtered_cloud"/> <!--topic name of pointcloud to make octomap from-->
    </include>
    <!-- camera/depth/color/points -->
    <!-- camera/depth_registered/points -->

    <!-- Run modify_octomap -->
    <node pkg="floor_octomap" type="modify_octomap_node" name="modify_octomap" output="screen" args="/camera_link"> <!--args: frame name for pose published from SLAM-->
        <rosparam command="load" file="$(find floor_octomap)/config/flatten.yaml" />
    </node>

    <!-- Run Flattening Service -->
    <node pkg="floor_octomap" type="flatten_octomap_service.py" name="flatten_octomap_service" output="screen"/>

    <!-- Play Bagfile -->
    <arg name="bagfile" default="false"/>
    <group if="$(eval bagfile != false)">
        <param name="/use_sim_time" value="True"/>
        <node pkg="rosbag" type="play" name="rosbag_player" output="screen" args="-q --clock -d 1 $(arg bagfile)"/>
    </group>

    <!-- RVIZ -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find floor_octomap)/rviz/orb_rviz_config.rviz" />

    <!-- original -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="world_to_baselink_tf_pub" args="0.5 0 1.35 0 0 0 1 world base_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="baselink_to_camera_tf_pub" args="0 0 0 0 0.581 0 0.814 base_link camera_start 100" /> -->
    <!-- steps_camera.bag -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="world_to_baselink_tf_pub" args="0.5 0 1.13 0 0 0 1 world base_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="baselink_to_camera_tf_pub" args="0 0 0 0 0.591 0 0.806 base_link camera_start 100" /> -->
    <!-- bridge_camera.bag -->
    <node pkg="tf" type="static_transform_publisher" name="world_to_baselink_tf_pub" args="0.5 0 1.13 0 0 0 1 world base_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="baselink_to_camera_tf_pub" args="0 0 0 0 0.581 0 0.814 base_link camera_start 100" /> -->

    <!-- Run ORB SLAM -->
    <node pkg="singlecamera_orbslam2" type="rgbd_slam_node" name="rgbd_slam" output="screen"
        args="$(find singlecamera_orbslam2)/Vocabulary/ORBvoc.txt $(find singlecamera_orbslam2)/Settings/D435.yaml camera_start camera_link"/>

    <!-- Depth Image Filter -->
    <node pkg="floor_octomap" type="depth_image_filter_node.py" name="filter_depth_service" output="screen" 
            args="/camera/aligned_depth_to_color/image_raw /filtered_depth_image /camera_depth_optical_frame"/> <!--input depth image, output depth image, output frame name-->

    <!-- Depth Image to Pointcloud -->
    <node pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager"/>

    <node pkg="nodelet" type="nodelet" name="cloudify"
            args="load depth_image_proc/point_cloud_xyz standalone_nodelet">
        <remap from="points" to="depth_filtered_cloud"/> <!--output pointcloud-->
        <remap from="image_rect" to="filtered_depth_image"/> <!--input depth image-->
        <remap from="camera_info" to="camera/aligned_depth_to_color/camera_info"/>
    </node>
</launch>